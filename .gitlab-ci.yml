image: golang:latest

variables:
  # Please edit to your GitLab project
  SF_DS_PREFIX: "perftest-example-gitlab-ci"
  TARGET_ENV_STAGING: "staging"
  TARGET_ENV_PRODUCTION: "production"
  # Remove when v3 CLI is shipped with perftest commands enabled by default
  ENABLE_PERFTEST_PREVIEW_COMMANDS: "true"

stages:
  - build # build the app
  - staging:deploy
  - staging:test
  - production:deploy
  - production:test

# ==== templates ====

.stormforge:
  image:
    name: registry.stormforge.io/library/stormforge-cli:latest
    entrypoint: [""]

# Troubleshooting
.busybox:
  image:
    name: busybox:latest
    entrypoint: [""]

# ===== Stage: Build ====

format:
  stage: build
  except: ["schedules"]
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

gotest:
  stage: build
  except: ["schedules"]
  script:
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  except: ["schedules"]
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary
  artifacts:
    paths:
      - mybinary

# Troubleshooting
regular:ping:
  stage: build
  extends: .busybox
  script:
    - ping 1.1.1.1 -c 5

sf:ping:
  stage: build
  extends: .stormforge
  script:
    - stormforge version
    - stormforge ping # check that we can reach the API and our token is correct

# ===== staging:deploy ====

deploy_staging:
  stage: staging:deploy
  except: ["schedules"]
  resource_group: staging
  script:
  - sleep 1 # dummy step - out of scope

# ===== staging:test ====

sf:loadtest_staging:
  stage: staging:test
  except: ["schedules"]
  resource_group: staging
  extends: .stormforge
  script:
    - ./scripts/data-source.sh "${TARGET_ENV}"
    - |
      stormforge create data-source \
        --from-file *.csv \
        --name-prefix-path="${SF_DS_PREFIX}/${TARGET_ENV}/" \
        --auto-field-names
    - |
      stormforge create test-run --test-case "${TESTCASE}" --from-file="loadtest/loadtest.mjs" \
        --define ENV=\"${TARGET_ENV}\" \
        --title="${TITLE}" --notes="${NOTES}" \
        --label="git-ref=${CI_COMMIT_REF_NAME}" \
        --label="gitlab-project=${CI_PROJECT_URL}" \
        --label="gitlab-commit=${CI_COMMIT_SHA}" \
        --label="gitlab-job=${CI_JOB_STAGE} ${CI_JOB_NAME}" \
        --label="giblab-job-url=${CI_JOB_URL}" \
        --label="gitlab-actor=${GITLAB_USER_LOGIN}" \
        ${LAUNCH_ARGS}
  variables:
    TARGET_ENV: "${TARGET_ENV_STAGING}"
    LAUNCH_ARGS: "--validate"
    NOTES: |
      Message:
      ${CI_COMMIT_MESSAGE}
    TITLE: "#${CI_CONCURRENT_ID} (${CI_COMMIT_SHORT_SHA})"
    TESTCASE: "perftest-example-gitlab-ci-${TARGET_ENV_STAGING}"

# ===== production:deploy ====

deploy_production:
  stage: production:deploy
  only:
    refs:
      - main
  except: ["schedules"]
  resource_group: production
  script:
  - sleep 1 # dummy step - out of scope

# ===== production:test ====

sf:loadtest_production:
  stage: production:test
  only:
    refs:
      - main
  extends: .stormforge
  resource_group: production
  script:
    - ./scripts/data-source.sh "${TARGET_ENV}"
    - |
      stormforge create data-source \
      --from-file *.csv \
      --name-prefix-path="${SF_DS_PREFIX}/${TARGET_ENV}/" \
      --auto-field-names
    - |
      stormforge create test-run --test-case "${TESTCASE}" --from-file="loadtest/loadtest.mjs" \
        --define ENV=\"${TARGET_ENV}\" \
        --title="${TITLE}" --notes="${NOTES}" \
        --label="git-ref=${CI_COMMIT_REF_NAME}" \
        --label="gitlab-project=${CI_PROJECT_URL}" \
        --label="gitlab-commit=${CI_COMMIT_SHA}" \
        --label="gitlab-job=${CI_JOB_STAGE} ${CI_JOB_NAME}" \
        --label="giblab-job-url=${CI_JOB_URL}" \
        --label="gitlab-actor=${GITLAB_USER_LOGIN}" \
        ${LAUNCH_ARGS}
  variables:
    TARGET_ENV: "${TARGET_ENV_PRODUCTION}"
    LAUNCH_ARGS: "--nfr-check-file=./loadtest/loadtest.nfr.yaml"
    NOTES: |
      Message:
      ${CI_COMMIT_MESSAGE}
    TITLE: "#${CI_CONCURRENT_ID} (${CI_COMMIT_SHORT_SHA})"
    TESTCASE: "perftest-example-gitlab-ci-${TARGET_ENV_PRODUCTION}"
